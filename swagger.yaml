swagger: '2.0'
info:
  title: SE2
  description: SE2 is a simple API allowing user to create exam and tasks.
  version: "1"
host: se2-2018.herokuapp.com
basePath: /v1
schemes:
  - https
produces:
  - application/json


paths:
  /users:
    get:
      tags:
      - "Users"
      parameters:
        - in: query
          name: name
          type: string
          description: filter by name the users to return.
        - in: query
          name: username
          type: string
          description: Filter by username the users to return.
        - in: query
          name: email
          type: string
          description: Filter by email the users to return.
      description: Returns the list of the IDs of the users which correspond to the filtering parameters.
      summary: Get users's IDs
      responses:
        200:
          description: The IDs of the users corresponding to the filtering parameters.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "Users"
      description:  Create a new user specifying name, surname, username, email.
      summary: Create user
      parameters:
        - in: body
          name: user
          description: A user object without ID.
          required: true
          schema:
            $ref: '#/definitions/User_no_id'
      responses:
        201:
          description: The ID of the created user.
          schema:
            type: integer
        400:
          description: Bad Request
                
  /users/{userID}:
    parameters:
      - in: path
        name: userID
        required: true
        type: integer
    get:
      tags:
      - "Users"
      description: Returns information (name, surname, email, username) about a single user by ID
      summary: Get user by ID
      responses:
        200:
          description: The requested user filtered by ID.
          schema:
            $ref: '#/definitions/User'
        404:
          description: Not Found
    put:
      tags:
      - "Users"
      description:  Update the information related to a single user selected by ID, changing name, surname, email
      summary: Update user
      parameters:
        - in: body
          name: user
          description: The information about name, surname, email, username
          required: true
          schema:
            $ref: '#/definitions/User_no_id'
      responses:
        200:
          description: OK, updated.
        409:
          description: Conflict
    delete:
      tags:
      - "Users"
      summary: Delete a user by ID.
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
                     
  /users/{userID}/exams:
    parameters:
      - in: path
        name: userID
        required: true
        type: integer
    get:
      tags:
      - "Users"
      parameters:
        - in: query
          name: role
          type: string
          description: The role of the user in the exams to return.
        - in: query
          name: exam_date
          type: string
          description: The date of the exams to return.
        - in: query
          name: name
          type: string
          description: The name of the exams to return.
        - in: query
          name: modality
          type: string
          description: The modality of the exams to return.
      description: Returns the list of exams's IDs taken or created by a user identified by ID.
      summary: Get user's exams
      responses:
        200:
          description: The IDs of the exams.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
        
  /tasks:
    get:
      tags:
      - "Tasks"
      parameters:
        - in: query
          name: title
          type: string
          description: The title of the tasks to return.
        - in: query
          name: question
          type: string
          description: The question of the tasks to return.
        - in: query
          name: type
          type: string
          description: The type of the tasks to return.
        - in: query
          name: author
          type: string
          description: The author of the tasks to return.
        - in: query
          name: tags
          type: array
          items:
            type: string
          description: The tags of the tasks to return.
      description: Returns the list of all tasks's IDs, filtering by question, title, type, author and tags.
      summary: Get tasks
      responses:
        200:
          description: The IDs of the tasks.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "Tasks"
      description: Create a task, specifying author, question, type (multi_choice, single_choice, open_answer, true/false), choices.
      summary: Create a task
      parameters:
        - in: body
          name: task
          description: The task to create
          required: true
          schema:
            $ref: '#/definitions/Task_no_id'
      responses:
        201:
          description: The ID of the created task.
          schema:
            type: integer
        400:
          description: Bad Request
            
  /tasks/{taskID}:
    parameters:
      - in: path
        name: taskID
        required: true
        type: integer
    get:
      tags:
      - "Tasks"
      description: Returns information about a task, author, question, type (multi_choice, single_choice, open_answer, true/false), choices
      summary: Get Task by ID
      responses:
        200:
          description: The requested task.
          schema:
            $ref: '#/definitions/Task'
        404:
          description: Not Found
    put:
      tags:
      - "Tasks"
      description: Update a task identified by ID, specifying author, question, type (multi_choice, single_choice, open_answer, true/false), choices.
      summary: Update a task by ID.
      parameters:
        - in: body
          name: task
          description: The task to update
          required: true
          schema:
            $ref: '#/definitions/Task_no_id'
      responses:
        200:
          description: OK, updated.
        409:
          description: Conflict
    delete:
      tags:
      - "Tasks"
      description: delete a task specifying its ID.
      summary: Delete a task by ID
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
            
  /answers:
    get:
      tags:
      - "Answers"
      parameters:
        - in: query
          name: user_id
          type: string
          description: The user_id of the answers to return.
        - in: query
          name: task_id
          type: string
          description: The task_id of the answers to return.
        - in: query
          name: type
          type: string
          description: The type of the answers to return.
      description: Returns the list of all answers's IDs, filtering by users who submitted them, related tasks and type.
      summary: Get answers's IDs 
      responses:
        200:
          description:  The IDs of the answers.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "Answers"
      description: create an answer specifying the user who submitted it, the related task and the list of answers given.
      summary: Create an answer.
      parameters:
        - in: body
          name: answer
          description: The answer to create
          required: true
          schema:
            $ref: '#/definitions/Answer_no_id'
      responses:
        201:
          description: The ID of the created answer
          schema:
            type: integer
        400:
          description: Bad Request
          
  /answers/{answerID}:
    parameters:
      - in: path
        name: answerID
        required: true
        type: integer
    get:
      tags:
      - "Answers"
      description: Get a single answer specifying its ID.
      summary: Get answer by ID
      responses:
        200:
          description: The requested answer.
          schema:
            $ref: '#/definitions/Answer'
        404:
          description: Not Found
    put:
      tags:
      - "Answers"
      description: submit an answer, specifying its submitter (user), the related task and a list of answers given 
      summary: Submit an answer
      parameters:
        - in: body
          name: answer
          description: The answer to submit
          required: true
          schema:
            $ref: '#/definitions/Answer_no_id'
      responses:
        200:
          description: OK, submitted.
        409:
          description: Conflict
    delete:
      tags:
      - "Answers"
      description: delete an answer specifying its ID.
      summary: Delete an answer
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
            
  /exams:
    get:
      tags:
      - "Exams"
      parameters:
        - in: query
          name: role
          type: string
          description: The role of the user in the exams to return.
        - in: query
          name: exam_date
          type: string
          description: The date of the exams to return.
        - in: query
          name: name
          type: string
          description: The name of the exams to return.
        - in: query
          name: modality
          type: string
          description: The modality of the exams to return.
      description: Get the list of exams's IDs, filtering by date, the role of the requesting user, the name and the modality.
      summary: Get exams's IDs.
      responses:
        200:
          description: The IDs of the user exams
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "Exams"
      description: Create a new exam specifying its name, author, starting and end dates, the review deadline, the list of students and teaching assistants, the list of tasks, the modality and optionally the raffle option. (it allows to specify a number of tasks to select from a pool of tasks randomly for each student) 
      summary: Create an exam.
      parameters:
        - in: body
          name: exam
          description: The exam to create
          required: true
          schema:
            $ref: '#/definitions/Exam_no_id'
      responses:
        201:
          description: The ID of the created exam
          schema:
            type: integer
        400:
          description: Bad Request
            
  /exams/{examID}:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    get:
      tags:
      - "Exams"
      description: Get information about a single exam
      summary: Returns an exam by ID.
      responses:
        200:
          description: The requested exam.
          schema:
            $ref: '#/definitions/Exam'
        404:
          description: Not Found
    put:
      tags:
      - "Exams"
      description: update a single exam, specifying its ID
      summary: Update an exam by ID
      parameters:
        - in: body
          name: exam
          description: The exam to update
          required: true
          schema:
            $ref: '#/definitions/Exam_no_id'
      responses:
        200:
          description: OK, updated.
        409:
          description: Conflict
    delete:
      tags:
      - "Exams"
      description: delete an exam specifying its ID.
      summary: Delete an exam
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
          
  /exams/{examID}/submit:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    post:
      tags:
      - "Exams"
      parameters:
        - in: body
          name: userID
          required: true
          schema:
            type: integer
      summary: Submit an exam.
      description: When you call this endpoint you confirm the given answers and you cannot update them nor submit new ones.
      responses:
        200:
          description: OK, submitted.
        400:
          description: Bad Request 
            
  /exams/{examID}/withdraw:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    post:
      tags:
      - "Exams"
      parameters:
        - in: body
          name: userID
          required: true
          schema:
              type: integer
      summary: Withdraw from an exam.
      description: When you call this endpoint you cannot answer or submit an exam and you will not receive any mark.
      responses:
        200:
          description: OK, withdrawed.
        400:
          description: Bad Request  
          
  /exams/{examID}/start:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    post:
      tags:
      - "Exams"
      parameters:
        - in: body
          name: userID
          required: true
          schema:
              type: integer
      description: the exam must be completed within its duration, and must be started before the deadline.
      summary: Start an exam.
      responses:
        200:
          description: OK, started.
        400:
          description: Bad Request  
                
  /exams/{examID}/results:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    get:
      tags:
      - "Exams"
      description: Retrieve list of result IDs of an exam.
      summary: Get results's IDs for an exam
      responses:
        200:
          description: The IDs of the users with the IDs of the results
          schema:
            type: array
            items: 
              type: "object"
              properties:
                user_id:
                  type: integer
                result_id:
                  type: integer
        400:
          description: Bad Request 
           
  /exams/{examID}/answers:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    get:
      tags:
      - "Exams"
      parameters:
        - in: query
          name: user_id
          type: string
          description: The user_id of the answers to return.
        - in: query
          name: task_id
          type: string
          description: The task_id of the answers to return.
        - in: query
          name: type
          type: string
          description: The type of the answers to return.
      description: Retrieve list of answer IDs filtering by student submitting and tasks of an exam.
      summary: Get answers for an exam
      responses:
        200:
          description: The IDs of the users with the IDs of the answers
          schema:
            type: array
            items: 
              type: "object"
              properties:
                user_id:
                  type: integer
                answer_id:
                  type: integer
        400:
          description: Bad Request 
           
  /exams/{examID}/peer-answers:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    get:
      tags:
      - "Exams"
      parameters:
        - in: query
          name: user_id
          type: string
          description: The user_id of the answers to return.
        - in: query
          name: answer_id
          type: string
          description: The answer_id of the answers to return.
      description: Retrieve a list of answers ID for a given exam that a user must peer review.
      summary: Get answers IDs to Peer Review
      responses:
        200:
          description: The IDs of the users with the IDs of the answers.
          schema:
            type: array
            items: 
              type: "object"
              properties:
                user_id:
                  type: integer
                answers_id:
                  type: integer
        400:
          description: Bad Request 
           
  /exams/{examID}/peer-corrections:
    parameters:
      - in: path
        name: examID
        required: true
        type: integer
    get:
      tags:
      - "Exams"
      parameters:
        - in: query
          name: user_id
          type: string
          description: The user_id of the answers to return.
        - in: query
          name: peer-correction_id
          type: string
          description: The peer-correction_id of the answers to return.
      description: Retrieve list of peer-correction ID of an exam, filtering by user submitting the answer.
      summary: Get peer corrections's IDs
      responses:
        200:
          description: The IDs of the users with the IDs of the peer-correction
          schema:
            type: array
            items: 
              type: "object"
              properties:
                user_id:
                  type: integer
                peer-correction_id:
                  type: integer
        400:
          description: Bad Request 
          
              
  /corrections:
    get:
      tags:
      - "Corrections"
      parameters:
        - in: query
          name: answer_id
          type: string
          description: The answer_id of the corrections to return.
        - in: query
          name: user_id
          type: string
          description: The user_id of the corrections to return.
      description: Returns all corrections's IDs
      summary: Get corrections
      responses:
        200:
          description: The IDs of the corrections.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "Corrections"
      description: create a correction specifying the answer, the text of the correction, the score achieved and the user doing the correction.
      summary: Create a correction.
      parameters:
        - in: body
          name: correction
          description: The correction to create
          required: true
          schema:
            $ref: '#/definitions/Correction_no_id'
      responses:
        201:
          description: The IDs of the result
          schema:
            type: integer
        400:
          description: Bad Request
            
  /corrections/{correctionID}:
    parameters:
      - in: path
        name: correctionID
        required: true
        type: integer
    get:
      tags:
      - "Corrections"
      description: Get a single correction specifying its ID
      summary: Get a correction
      responses:
        200:
          description: The requested correction.
          schema:
            $ref: '#/definitions/Correction'
        404:
          description: Not Found
    put:
      tags:
      - "Corrections"
      description: update a correciton by ID
      summary: Update a correction
      parameters:
        - in: body
          name: correction
          description: The correction to update
          required: true
          schema:
            $ref: '#/definitions/Correction_no_id'
      responses:
        200:
          description: OK, updated
        409:
          description: Conflict
    delete:
      tags:
      - "Corrections"
      description: Delete a correction specifying its ID
      summary: Delete a correction
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
              
  /peer-corrections:
    get:
      tags:
      - "Peer corrections"
      parameters:
        - in: query
          name: answer_id
          type: string
          description: The answer_id of the corrections to return.
        - in: query
          name: user_id
          type: string
          description: The user_id of the corrections to return.
      description: Get all peer corrections, filtering by answer and user making the correction.
      summary: Get peer-corrections.
      responses:
        200:
          description: The IDs of the peer-corrections
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "Peer corrections"
      description: Create a new peer correction specifying the answer, the user (student) doing the correction and the text of the peer correction.
      summary: Create a peer-correction.
      parameters:
        - in: body
          name: peer-correction
          description: The peer-correction to create
          required: true
          schema:
            $ref: '#/definitions/Peer-correction_no_id'
      responses:
        201:
          description: The ID of the created peer-correction
          schema:
            type: integer
        400:
          description: Bad Request
            
  /peer-corrections/{peerCorrectionID}:
    parameters:
      - in: path
        name: peerCorrectionID
        required: true
        type: integer
    get:
      tags:
      - "Peer corrections"
      description: Get a single peer correction
      summary: Get a peer correction
      responses:
        200:
          description: The requested peer-correction.
          schema:
            $ref: '#/definitions/Peer-correction'
        404:
          description: Not Found
    put:
      tags:
      - "Peer corrections"
      description: Update a peer correction by ID, changing the text of the correction.
      summary: Update a peer-correction
      parameters:
        - in: body
          name: peer-correction
          description: The peer-correction to update
          required: true
          schema:
            $ref: '#/definitions/Peer-correction_no_id'
      responses:
        200:
          description: OK, updated.
        409:
          description: Conflict
    delete:
      tags:
      - "Peer corrections"
      summary: Delete a peer-correction by ID.
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
          
  /TA-peer-corrections:
    get:
      tags:
      - "TA peer corrections"
      parameters:
        - in: query
          name: user_id
          type: string
          description: The user_id of the corrections to return.
      description: Get all corrections of peer correction's IDs made by Teaching Assistants
      summary: Get TA-peer-corrections
      responses:
        200:
          description: The IDs of the TA-peer-corrections.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
    post:
      tags:
      - "TA peer corrections"
      summary: Create a TA-peer-correction
      description: Create a TA-peer-correction, specifying the related peer correction, the text of the correction, a score and the user doing the correction (a Teaching Assistant)
      parameters:
        - in: body
          name: TA-peer-correction
          description: The TA-peer-correction to create
          required: true
          schema:
            $ref: '#/definitions/TA-peer-correction_no_id'
      responses:
        201:
          description: The ID of the created TA-peer-corrections.
          schema:
            type: integer
        400:
          description: Bad Request
            
  /TA-peer-corrections/{TAPeerCorrectionID}:
    parameters:
      - in: path
        name: TAPeerCorrectionID
        required: true
        type: integer
    get:
      tags:
      - "TA peer corrections"
      description: Get a single Ta-peer-correction by ID
      summary: Get a TA-peer-correction
      responses:
        200:
          description: The requested TA-peer-correction. 
          schema:
            $ref: '#/definitions/TA-peer-correction'
        404:
          description: Not Found
    put:
      tags:
      - "TA peer corrections"
      summary: Update a TA-peer-correction by ID.
      parameters:
        - in: body
          name: TA-peer-correction
          description: The TA-peer-correction to update
          required: true
          schema:
            $ref: '#/definitions/TA-peer-correction_no_id'
      responses:
        200:
          description: OK, updated.
        409:
          description: Conflict
    delete:
      tags:
      - "TA peer corrections"
      summary: Delete a TA-peer-correction by ID.
      responses:
        204:
          description: OK, deleted.
        404:
          description: Not Found
          
            
  /results:
    get:
      tags:
      - "Results"
      parameters:
        - in: query
          name: exam_id
          type: string
          description: The exam_id of the corrections to return.
        - in: query
          name: user_id
          type: string
          description: The user_id of the corrections to return.
      description: Get the IDs of the results filtering by the exam and the user submitting the exams.
      summary: Get results
      responses:
        200:
          description: The IDs of the results.
          schema:
            type: array
            items: 
              type: integer
        404:
          description: Not Found
            
  /result/{resultID}:
    parameters:
      - in: path
        name: resultID
        required: true
        type: integer
    get:
      tags:
      - "Results"
      description: Get the user, the exam, the score, the start and end time of the user's submission of an exam
      summary: Get a result
      responses:
        200:
          description: The requested result.
          schema:
            $ref: '#/definitions/Result'
        404:
          description: Not Found
          
definitions:
  User:
    type: "object"
    properties:
      id:
        type: integer
        description: The ID of the user
      name:
        type: string
        description: The name of the user
      surname:
        type: string
        description: The surname of the user
      username:
        type: string
        description: The username of the user
      email:
        type: string
        description: The email of the user
    required:  
      - id
      - name
      - surname
      - username
      - email
  User_no_id:
    type: "object"
    properties:
      name:
        type: string
        description: The name of the user
      surname:
        type: string
        description: The surname of the user
      username:
        type: string
        description: The username of the user
      email:
        type: string
        description: The email of the user
    required:
      - name
      - surname
      - username
      - email
      
  Task:
    type: "object"
    properties:
      id:
        type: integer
        description: The ID of the task
        example: 1
      title:
        type: string
        description: The title of the task
        example: "Task title"
      author:
        description: The ID of the user who is the author of the task
        type: integer
      question:
        type: string
        description: The question of the task
        example: ""
      type:
        type: string
        description: The type of the task
        enum: ["multi_choice", "single_choice", "open_answer", "true_false"]
      choices:
        description: The choices of the task (only if type is multi_choice)
        type: array
        items:
            type: string
        example: ["", ""]
        required: [$type == "multi_choice" || $type=="single_choice"]
      correct_answer:
        description: The correct answers of the task
        type: array
        items:
          type: string
      tags:
        description: The tags of the task
        type: array
        items:
          type: string
    required:  
      - id
      - title
      - question
      - type
      - author
      
  Task_no_id:
    type: "object"
    properties:
      title:
        type: string
        description: The title of the task
        example: "Task title"
      author:
        description: The ID of the user who is the author of the task
        type: integer
      question:
        type: string
        description: The question of the task
        example: ""
      type:
        type: string
        description: The type of the task
        enum: ["multi_choice", "single_choice", "open_answer", "true_false"]
      choices:
        description: The choices of the task (only if type is multi_choice)
        type: array
        items:
            type: string
        example: ["", ""]
        required: [$type == "multi_choice"]
      correct_answer:
        description: The correct answers of the task
        type: array
        items:
          type: string
      tags:
        description: The tags of the task
        type: array
        items:
          type: string
    required:
      - title
      - question
      - type
      - author
      
  Exam:
    type: "object"
    properties:
      id:
        type: integer
        description: The ID of the exam
        example: 1
      name:
        type: string
        description: The name of the exam
        example: "Exam 1"
      author:
        description: The ID of the user who is the author of the exam
        type: integer
      created_at:
        description: The creation date-time of the exam
        type: string
        format: date-time
        example: "2018-11-06T10:09:23:15Z"
      start:
        description: The start date-time of the exam
        type: string
        format: date-time
      end:
        description: The end date-time of the exam
        type: string
        format: date-time
      duration:
        description: The duration time of the exam
        type: string
        format: time
      review_deadline:
        description: The deadline of the review of the exam
        type: string
        format: date-time
      tasks:
        description: The list of tasks of the exams
        type: array
        items:
          type: integer
        example: [1, 2, 3]
      students:
        description: The list of students of the exams
        type: array
        items:
          type: integer
        example: [1, 2, 3]
      tas:
        description: The list of tas of the exams
        type: array
        items:
          type: integer
        example: [1, 2, 3]
      modality:
        description: The modality of the exams
        type: string
        enum: ["exam", "random_exam", "crowdsourcing"]
      raffle:
        description: The raffle of some tags of the tasks of the exams (only if modality is random_exam)
        type: array
        items:
          properties:
            number: 
              type: integer
            tag: 
              type: string
        example: [{number: 2, tag: "git"}, {number: 42, tag: "testing"}]
        required: [$modality == "random_exam"]
      number:
        description: The number of tasks for each user (only if modality is crowdsourcing) 
        type: integer
        required: [$modality == "crowdsourcing"]
    required:  
      - id
      - name
      - created_at
      - tasks
      - students
      - tas
      - modality
      - author
  Exam_no_id:
    type: "object"
    properties:
      name:
        type: string
        description: The name of the exam
        example: "Exam 1"
      author:
        description: The ID of the user who is the author of the exam
        type: integer
      created_at:
        description: The creation date-time of the exam
        type: string
        format: date-time
        example: "2018-11-06T10:09:23:15Z"
      start:
        description: The start date-time of the exam
        type: string
        format: date-time
      end:
        description: The end date-time of the exam
        type: string
        format: date-time
      duration:
        description: The duration time of the exam
        type: string
        format: time
      review_deadline:
        description: The deadline of the review of the exam
        type: string
        format: date-time
      tasks:
        description: The list of tasks of the exams
        type: array
        items:
          type: integer
        example: [1, 2, 3]
      students:
        description: The list of students of the exams
        type: array
        items:
          type: integer
        example: [1, 2, 3]
      tas:
        description: The list of tas of the exams
        type: array
        items:
          type: integer
        example: [1, 2, 3]
      modality:
        description: The modality of the exams
        type: string
        enum: ["exam", "random_exam", "crowdsourcing"]
      raffle:
        description: The raffle of some tags of the tasks of the exams (only if modality is random_exam)
        type: array
        items:
          properties:
            number: 
              type: integer
            tag: 
              type: string
        example: [{number: 2, tag: "git"}, {number: 42, tag: "testing"}]
        required: [$modality == "random_exam"]
      number:
        description: The number of tasks for each user (only if modality is crowdsourcing) 
        type: integer
        required: [$modality == "crowdsourcing"]
    required:
      - name
      - tasks
      - students
      - tas
      - modality
      - author
      
  Answer:
    type: "object"
    properties:
      id:
        description: The ID of the answer
        type: integer
        example: 42
      user_id:
        description: The ID of the user who answered
        type: integer
      task_id:
        description: The ID of the task which the answer refers to
        type: integer
      answers:
        description: The text of the answer
        type: array
        items:
          type: string
      submitted_at:
        description: The submission date-time of the answer
        type: string
        format: date-time
        example: "2018-11-06T10:09:23:15Z"
    required:  
      - id
      - user_id
      - task_id
      - answers
      - submitted_at
  Answer_no_id:
    type: "object"
    properties:
      user_id:
        description: The ID of the user who answered
        type: integer
      task_id:
        description: The ID of the task which the answer refers to
        type: integer
      answers:
        description: The text of the answer
        type: array
        items:
          type: string
    required:  
      - user_id
      - task_id
      - answers
    
  Correction:
    type: "object"
    properties:
      id:
        description: The ID of the correction
        type: integer
      answer_id:
        description: The ID of the answer which the correction refers to
        type: integer
      text:
        description: The text of the correction
        type: string
      score:
        description: The score assigned to the answer
        type: integer
      user_id: 
        description: The ID of the TA which correct the answer
        type: integer
    required:
      - id
      - answer_id
      - text
      - score
      - user_id
  Correction_no_id:
    type: "object"
    properties:
      answer_id:
        description: The ID of the answer which the correction refers to
        type: integer
      text:
        description: The text of the correction
        type: string
      score:
        description: The score assigned to the answer
        type: integer
      user_id: 
        description: The ID of the TA which correct the answer
        type: integer
    required:
      - answer_id
      - text
      - score
      - user_id
      
      
  Peer-correction:
    type: "object"
    properties:
      id:
        description: The ID of the peer-correction
        type: integer
      answer_id:
        description: The ID of the answer which the peer-correction refer to
        type: integer
      text:
        description: The text of the peer-correction
        type: string
      user_id: 
        description: The ID of the student which is reviewing the answer of another student
        type: integer
    required:
      - id
      - answer_id
      - text
      - user_id
  Peer-correction_no_id:
    type: "object"
    properties:
      answer_id:
        description: The ID of the answer which the peer-correction refer to
        type: integer
      text:
        description: The text of the peer-correction
        type: string
      user_id: 
        description: The ID of the student which is reviewing the answer of another student
        type: integer
    required:
      - answer_id
      - text
      - user_id
      
  TA-peer-correction:
    type: "object"
    properties:
      id:
        description: The ID of the TA-peer-correction
        type: integer
      peer-correction_id:
        description: The ID of the peer-correction which the TA-peer-correction refers to
        type: integer
      text:
        description: The text of the TA-peer-correction
        type: string
      score:
        description: The score of the TA-peer-correction
        type: integer
      user_id:
        description: The ID of the TA who is correcting the peer-correction of a student
        type: integer
    required:
      - id
      - peer-correction_id
      - text
      - score
      - user_id
  TA-peer-correction_no_id:
    type: "object"
    properties:
      peer-correction_id:
        description: The ID of the peer-correction which the TA-peer-correction refers to
        type: integer
      text:
        description: The text of the TA-peer-correction
        type: string
      score:
        description: The score of the TA-peer-correction
        type: integer
      user_id:
        description: The ID of the TA who is correcting the peer-correction of a student
        type: integer
    required:
      - peer-correction_id
      - text
      - score
      - user_id
      
      
  Result:
    type: "object"
    properties:
      id:
        description: The ID of the result
        type: integer
      start_time:
        description: The start date-time of the result
        type: integer
        format: date-time
      end_time:
        description: The end date-time of the result
        type: integer
        format: date-time
      score:
        description: The score of the result
        type: integer
      exam_id:
        description: The ID of the exam which the result refers to
        type: integer
      user_id:
        description: The ID of the student which the result of the exam refers to
        type: integer
    required:
      - id
      - start_time
      - end_time
      - score
      - exam_id
      - user_id
  Result_no_id:
    type: "object"
    properties:
      start_time:
        description: The start date-time of the result
        type: integer
        format: date-time
      end_time:
        description: The end date-time of the result
        type: integer
        format: date-time
      score:
        description: The score of the result
        type: integer
      exam_id:
        description: The ID of the exam which the result refers to
        type: integer
      user_id:
        description: The ID of the student which the result of the exam refers to
        type: integer
    required:
      - start_time
      - end_time
      - score
      - exam_id
      - user_id